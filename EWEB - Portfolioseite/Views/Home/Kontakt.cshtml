@{
    ViewData["Title"] = "Yannic Hartmann";
}
@model EWEB___Portfolioseite.Models.KontaktViewModel

<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio</title>
</head>
<body>

    <div id="background"></div>

    <header>
        <h1>Wie du mich erreichst</h1>
    </header>

    <nav>
        <a asp-area="" asp-controller="Home" asp-action="Index">Home</a>
        <a asp-area="" asp-controller="Home" asp-action="Projekte">Projekte</a>
        <a asp-area="" asp-controller="Home" asp-action="Kontakt">Kontakt</a>
    </nav>

    <section id="contact" class="section">
        <h2>Kontakt</h2>
        <!-- HIER KONTAKTFORMULAR ODER KONTAKTINFORMATIONEN EINFÜGEN -->
        <p>Füge deine Kontaktinformationen hier hinzu oder erstelle ein Formular.</p>
    </section>
    <body>
        <div class="container">
            <label for="name">Name</label>
            <input type="text" id="name" placeholder=@Model.Name />

            <label for="message">Text</label>
            <textarea id="message" placeholder="Ihr Text" rows="3"></textarea>

            <button onclick="location.href='@Url.Action("KontaktformularSend", "Home")'">Senden</button>

            <div class="chat-box" id="chatBox"></div>
        </div>

        <script>
            const sendButton = document.getElementById("send");
            const chatBox = document.getElementById("chatBox");

            sendButton.addEventListener("click", () => {
              const nameInput = document.getElementById("name").value.trim();
              const messageInput = document.getElementById("message").value.trim();

              if (nameInput && messageInput) {
                const timestamp = new Date().toLocaleTimeString();
                const chatMessage = `<div class='chat-message'><span>${timestamp} ${nameInput}:</span> ${messageInput}</div>`;
                chatBox.innerHTML += chatMessage;

                // Eingabefelder leeren
                document.getElementById("name").value = "";
                document.getElementById("message").value = "";

                // Scroll zur neuesten Nachricht
                chatBox.scrollTop = chatBox.scrollHeight;
              } else {
                alert("Bitte beide Felder ausfüllen!");
              }
            });
        </script>
    </body>
   <style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    .container {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    input[type="text"] {
        padding: 10px;
        width: 200px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    textarea {
        padding: 10px;
        width: calc(100% - 22px);
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        padding: 10px 20px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    button:hover {
        background-color: #0056b3;
    }

    .chat-box {
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-top: 20px;
        padding: 10px;
        height: 200px;
        width: calc(100% - 22px);
        overflow-y: auto;
        background-color: #f9f9f9;
    }

    .chat-message {
        margin: 5px 0;
        padding: 8px;
        border-radius: 4px;
        background-color: #e9ecef;
    }

    .chat-message span {
        font-weight: bold;
        color: #007BFF;
    }
  </style>
    <footer>
        <p>&copy; 2024 Yannic Hartmann. Alle Rechte vorbehalten.</p>
    </footer>

    <script>
        const background = document.getElementById('background');

        function createEmoji(type) {
            const emoji = document.createElement('div');
            emoji.classList.add(type);
            emoji.textContent = type === 'flame' ? 'YH' : '☎️';
            emoji.style.left = Math.random() * 100 + 'vw';
            emoji.style.top = Math.random() * 100 + 'vh';
            emoji.style.fontSize = Math.random() * 1.5 + 1 + 'rem';
            emoji.style.opacity = Math.random() * 0.2 + 0.2;

            background.appendChild(emoji);

            let posX = Math.random() * 2 - 1; // Horizontal direction
            let posY = Math.random() * 2 - 1; // Vertical direction

            const moveEmoji = setInterval(() => {
                const rect = emoji.getBoundingClientRect();
                emoji.style.left = rect.left + posX + 'px';
                emoji.style.top = rect.top + posY + 'px';

                if (
                    rect.top < -50 ||
                    rect.left < -50 ||
                    rect.bottom > window.innerHeight + 50 ||
                    rect.right > window.innerWidth + 50
                ) {
                    clearInterval(moveEmoji);
                    emoji.remove();
                }
            }, 50);

            setTimeout(() => {
                emoji.style.opacity = '0';
                setTimeout(() => emoji.remove(), 1000);
            }, 7000); // Fade out after 4 seconds
        }

        setInterval(() => createEmoji('flame'), 700);
        setInterval(() => createEmoji('face'), 1200);
    </script>

</body>
</html>
